//If a message is received
function onMessage(protocol, host, port, destination, values) {
	//Message reception
/*
	console("Received on '" + protocol + "' (" + host + ":" + port + ") to '" + destination + "', " + values.length + " values : ");
	for(var valueIndex = 0 ; valueIndex < values.length ; valueIndex++)
		console("- arg " + valueIndex + " = " + values[valueIndex]);
*/
	if(protocol == "midi") {
		if((0 < values[1]) && (values[1] < points.length-1))
			points[values[1]].y = map(values[2], 0, 127, -8, 8);
		else if(values[1] == 31)
			rotate.x = map(values[2], 0, 127, -180, 180);
		else if(values[1] == 32)
			rotate.y = map(values[2], 0, 127, -180, 180);
		else if(values[1] == 33)
			rotate.z = map(values[2], 0, 127, -180, 180);
		else if(values[1] == 34)
			run("zoom " + map(values[2], 0, 127, 50, 250));
		else if(values[1] == 5)
			options.factor = map(values[2], 0, 127, 0, 5);
		else if(values[1] == 6)
			options.finefactor = map(values[2], 0, 127, -1, 1);
		else if(values[1] == 9)
			run("setSpeedF values " + map(values[2], 0, 127, -0.4, 0.4));
	}
	update(points, options);
}

var points = [
			{x: -5, y:  0, z: -2},
			{x: -3, y: -4, z: -2},
			{x: -1, y:  2, z:  2},
			{x:  1, y: -1, z:  2},
			{x:  3, y:  4, z:  2},
			{x:  5, y:  2, z: -2},
			];
var rotate = {x: 0, y: -80, z:-10};
var options = {nb: 10, factor: 0, finefactor: 0.2};

//Creation of the score
function onCreate() {
	//Viewport setup
	run("clear");
	run("registerTexture background 0 0 0 0 ./Tools/background.jpg");
	run("center 0 0");
	run("zoom 110");
	
	//Create your own curve!!
	addCurve(points, options);
	update(points, options);
}

//Curve creation
function addCurve(pts, thick) {
	var id = 0;

	//Browse delta-curves
	for(var i = 0 ; i < thick.nb ; i++) {
		//Create curves
		run("add curve        " + (1000 + id));
		run("setGroup         current lines");
		if(i == thick.nb/2)
			run("setColor     current 255 80 30 255");
		
		//Create cursors
		run("add cursor       " + id);
		run("setGroup         current values");
		run("setCurve         current lastCurve");
		run("setBoundsSource  current -10 10 10 -10");
		run("setBoundsTarget  current 0 1 1 0");
			
		//Increment ID
		id++
	}
}

//Change curves
function update(pts, thick) {
	var id = 0;
	run("rotate " + rotate.x + " " + rotate.y + " " + rotate.z);

	//Browse delta-curves
	for(var i = 0 ; i < thick.nb ; i++) {
		//Create curves
		var val = 1+map(i, 0, thick.nb, -(thick.factor+thick.finefactor), thick.factor+thick.finefactor);

		//Browse points
		for(var ptIndex = 0 ; ptIndex < pts.length ; ptIndex++) {
			if((ptIndex == 0) || (ptIndex == (pts.length-1)))
				run("setSmoothPointAt " + (1000 + id) + " " + ptIndex + " " + pts[ptIndex].x + " " + pts[ptIndex].y + " " + pts[ptIndex].z);
			else
				run("setSmoothPointAt " + (1000 + id) + " " + ptIndex + " " + (pts[ptIndex].x*val) + " " + (pts[ptIndex].y*val) + " " +(pts[ptIndex].z*val));
		}
		run("setSpeed " + id + " auto 10");

		//Increment ID
		id++
	}
}


//Modification of points


/*
    IanniX — a graphical real-time open-source sequencer for digital art
    Copyright (C) 2010-2012 — IanniX Association

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

